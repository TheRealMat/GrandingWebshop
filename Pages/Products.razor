@page "/products"
@using GrandingWebshop.Models
@using System.Text.Json;
@inject HttpClient Http


<PageTitle>Products test</PageTitle>

<h1>Products test (functions)</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (root == null || root.results == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="album py-5 bg-light">
        <div class="container">

            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                @foreach (ProductModel product in products)
                {
                    <div class="col">
                        <div class="card shadow-sm">
                            <svg class="bd-placeholder-img card-img-top" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text></svg>

                            <div class="card-body">
                                <p class="card-text">@product.Name</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                                    </div>
                                    <small class="text-muted">9 mins</small>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private ProductModel[]? products;
    private Root? root; // response model

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await Http.GetAsync("get_products");
        string json = await response.Content.ReadAsStringAsync();

        root = JsonSerializer.Deserialize<Root>(json);
        if (root != null)
            products = root.results;
    }

    public class Meta
    {
        public string? served_by { get; set; }
        public double duration { get; set; }
        public int changes { get; set; }
        public int last_row_id { get; set; }
        public bool changed_db { get; set; }
        public int size_after { get; set; }
        public int rows_read { get; set; }
        public int rows_written { get; set; }
    }

    public class Root
    {
        public bool success { get; set; }
        public Meta? meta { get; set; }
        public ProductModel[]? results { get; set; }
    }


}
